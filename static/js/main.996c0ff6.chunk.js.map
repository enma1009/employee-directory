{"version":3,"sources":["components/header/index.js","components/search/index.js","App.js","serviceWorker.js","index.js"],"names":["PageHeader","Jumbotron","Search","state","searchResults","DatatablePage","data","columns","label","field","sort","rows","responsive","striped","bordered","this","setState","employees","Component","App","props","search","Container","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4qDAWeA,MARf,WACI,OACI,kBAACC,EAAA,EAAD,KACI,2D,kBCsFGC,E,4MArFXC,MAAQ,CACJC,cAAc,I,EAiBlBC,cAAgB,WACZ,IAAMC,EAAO,CACXC,QAAS,CACP,CACEC,MAAO,KACPC,MAAO,KACPC,KAAM,OAER,CACEF,MAAO,OACPC,MAAO,OACPC,KAAM,OAER,CACEF,MAAO,aACPC,MAAO,aACPC,KAAM,QAGVC,KAAM,EAAKR,MAAMC,eAGnB,OACE,kBAAC,IAAD,CACAQ,YAAU,EACRC,SAAO,EACPC,UAAQ,EACRR,KAAMA,K,kEAzCVS,KAAKC,SAAS,CACVZ,cAAca,M,+BAuDlB,OAAO,6BAmBFF,KAAKV,qB,GAhFGa,a,SCqBNC,E,kDApBb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDjB,MAAQ,CACXkB,OAAO,IAHO,E,qDAUhB,OACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAQD,OAAQN,KAAKZ,MAAMkB,c,GAfjBE,IAAML,WCMJM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.996c0ff6.chunk.js","sourcesContent":["import React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nfunction PageHeader() {\n    return (\n        <Jumbotron>\n            <h1>Employee Directory Search</h1>\n        </Jumbotron>\n    )\n}\n\nexport default PageHeader;","import React,{Component} from 'react';\nimport employees from '../../data/employeeList.json';\n//import Row from 'react-bootstrap/Row';\n// import Table from 'react-bootstrap/Table';\nimport { MDBDataTable } from 'mdbreact';\n\nclass Search extends Component {\n    state = {\n        searchResults:[]\n    }\n    componentDidMount() {\n        this.setState({\n            searchResults:employees\n        });\n    }\n\n    // componentDidUpdate(previousProp) {\n    //     if(previousProp.search!==this.props.search) {\n    //         this.setState({\n    //             searchResults:employees.filter(employee=>employee.name.includes(this.props.search))\n    //         });\n    //         this.DatatablePage();\n    //     }\n    // }\n\n    DatatablePage = ()=> {\n        const data = {\n          columns: [\n            {\n              label: 'ID',\n              field: 'id',\n              sort: 'asc',\n            },\n            {\n              label: 'Name',\n              field: 'name',\n              sort: 'asc',\n            },\n            {\n              label: 'Department',\n              field: 'department',\n              sort: 'asc',\n            }\n          ],\n          rows: this.state.searchResults\n        };\n      \n        return (\n          <MDBDataTable\n          responsive\n            striped\n            bordered\n            data={data}\n          />\n        );\n      }\n\n    // sortList = ()=> {\n    //     let newArray = this.state.searchResults.sort();\n    //     console.log(newArray);\n    //     this.setState({\n    //         searchResults:newArray\n    //     });\n        \n    // }\n\n    render() {\n        return <div>\n            {/* <button onClick={()=>this.sortList()}>Sort list by alphabetical order</button> */}\n            {/* <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Name</th>\n                        <th>Department</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state.searchResults.map(employee=>\n                    <tr key={employee.id}>\n                        <td>{employee.id}</td>\n                        <td>{employee.name}</td>\n                        <td>{employee.department}</td>\n                    </tr>)}\n                </tbody>\n            </Table> */}\n            {this.DatatablePage()}\n            {/* {this.state.searchResults.map(employee=><div key={employee.id}>{employee.name}</div>)} */}\n        </div>\n    }\n}\n\nexport default Search;\n\n// Note to TA: I had spent a ridiculous amount of time building my table and functions from scratch before I discovered there is a component (MDBDataTable) that does the sorting and searching for me, and it works better than what I had accomplished. I left my old code as comments just to show the work","import React from 'react';\nimport './App.css';\nimport PageHeader from './components/header';\nimport Search from './components/search';\nimport Container from 'react-bootstrap/Container';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      search:\"\"\n    }\n  }\n\n  \n\n  render() {\n    return (\n      <Container>\n        <PageHeader />\n        {/* Search for an employee (search is case sensitive): <input className=\"mb-4\" type=\"text\" value={this.state.search} onChange={(e)=>this.setState({search:e.target.value})} />  */}\n        <Search search={this.state.search} />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}